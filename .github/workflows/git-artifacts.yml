name: git-artifacts

on:
  # This workflow can be triggered manually in the Actions tab, see
  # https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/
  workflow_dispatch:
    inputs:
      build_only:
        description: 'Optionally restrict what artifacts to build'
        required: false
      ref:
        description: 'Optionally override which branch to build'
        required: false
      repository:
        description: 'Optionally override from where to fetch the specified ref'
        required: false
      build_arm64:
        description: 'Optionally build ARM64 artifacts (requires a self-hosted ARM64 runner to be active in this repo)'
        required: false

env:
  GPG_OPTIONS: "--batch --yes --no-tty --list-options no-show-photos --verify-options no-show-photos --pinentry-mode loopback"
  HOME: "${{github.workspace}}\\home"
  MSYSTEM: MINGW64
  USERPROFILE: "${{github.workspace}}\\home"
  BUILD_ONLY: "${{github.event.inputs.build_only}}"
  REPOSITORY: "${{github.event.inputs.repository}}"
  BUILD_ARM64: "${{github.event.inputs.build_arm64}}"
  REF: "${{github.event.inputs.ref}}"

jobs:
  bundle-artifacts:
    runs-on: windows-latest
    steps:
      - name: Configure user
        shell: bash
        run:
          USER_NAME="${{github.actor}}" &&
          USER_EMAIL="${{github.actor}}@users.noreply.github.com" &&
          mkdir "$HOME" &&
          git config --global user.name "$USER_NAME" &&
          git config --global user.email "$USER_EMAIL" &&
          echo "PACKAGER=$USER_NAME <$USER_EMAIL>" >>$GITHUB_ENV
      - uses: dennisameling/setup-git-for-windows-sdk@native-arm64-sdk
        with:
          flavor: build-installers
      - name: Clone build-extra
        shell: bash
        run: |
          d=/usr/src/build-extra &&
          if test ! -d $d/.git
          then
            git clone --single-branch -b main https://github.com/git-for-windows/build-extra $d
          else
            git -C $d fetch https://github.com/git-for-windows/build-extra main &&
            git -C $d switch -C main FETCH_HEAD
          fi
      - name: Prepare home directory for GPG signing
        if: env.GPGKEY != ''
        shell: bash
        run: |
          echo '${{secrets.PRIVGPGKEY}}' | tr % '\n' | gpg $GPG_OPTIONS --import &&
          mkdir -p home &&
          git config --global gpg.program "/usr/src/build-extra/gnupg-with-gpgkey.sh" &&
          info="$(gpg --list-keys --with-colons "${GPGKEY%% *}" | cut -d : -f 1,10 | sed -n '/^uid/{s|uid:||p;q}')" &&
          git config --global user.name "${info% <*}" &&
          git config --global user.email "<${info#*<}"
        env:
          GPGKEY: ${{secrets.GPGKEY}}
      - name: Generate bundle artifacts
        env:
          GPGKEY: ${{secrets.GPGKEY}}
        shell: bash
        run: |
          printf '#!/bin/sh\n\nexec /mingw64/bin/git.exe "$@"\n' >/usr/bin/git &&
          mkdir -p bundle-artifacts &&

          { test -n "$REPOSITORY" || REPOSITORY='${{github.repository}}'; } &&
          { test -n "$REF" || REF='${{github.ref}}'; } &&
          git -c init.defaultBranch=main init --bare &&
          git remote add -f origin https://github.com/git-for-windows/git &&
          git fetch "https://github.com/$REPOSITORY" "$REF:$REF" &&

          tag_name="$(git describe --match 'v[0-9]*' FETCH_HEAD)-$(date +%Y%m%d%H%M%S)" &&
          echo "prerelease-${tag_name#v}" >bundle-artifacts/ver &&
          echo "${tag_name#v}" >bundle-artifacts/display_version &&
          echo "$tag_name" >bundle-artifacts/next_version &&
          git tag $(test -z "$GPGKEY" || echo " -s") -m "Snapshot build" "$tag_name" FETCH_HEAD &&
          git bundle create bundle-artifacts/git.bundle origin/main.."$tag_name" &&

          sh -x /usr/src/build-extra/please.sh mention feature "Snapshot of $(git show -s  --pretty='tformat:%h (%s, %ad)' --date=short FETCH_HEAD)" &&
          git -C /usr/src/build-extra bundle create "$PWD/bundle-artifacts/build-extra.bundle" origin/main..main
      - name: Clean up temporary files
        if: always()
        shell: bash
        run: rm -rf home
      - name: 'Publish Pipeline Artifact: bundle-artifacts'
        uses: actions/upload-artifact@v1
        with:
          name: bundle-artifacts
          path: bundle-artifacts
  pkg:
    # Hack to ensure that the "determine skip" step works if no self-hosted ARM64 runner is available
    runs-on: ${{ ((matrix.arch.name == 'aarch64' && github.event.inputs.build_arm64 == 'true') && fromJSON('["Windows", "ARM64"]')) || 'windows-latest' }}
    needs: bundle-artifacts
    strategy:
      matrix:
        arch:
          - name: x86_64
            pacman_arch: x86_64
            bin: /amd64
          - name: i686
            pacman_arch: i686
            bin: ''
          - name: aarch64
            pacman_arch: clang-aarch64
            bin: ''
    steps:
      - name: Determine whether this job should be skipped
        shell: bash
        run: |
          if test "${{matrix.arch.name}}" = "aarch64" && test "$BUILD_ARM64" != "true"
          then
            echo "SKIP=true" >>$GITHUB_ENV
            exit 0
          fi
          for e in ${BUILD_ONLY:-pkg}
          do
            case $e in
            *-${{matrix.arch.name}}) exit 0;; # build this artifact
            *-*) ;; # not this build artifact, keep looking
            *) exit 0;; # build this artifact
            esac
          done
          echo "SKIP=true" >>$GITHUB_ENV
      - name: Configure user
        if: env.SKIP != 'true'
        shell: bash
        run:
          USER_NAME="${{github.actor}}" &&
          USER_EMAIL="${{github.actor}}@users.noreply.github.com" &&
          mkdir "$HOME" &&
          git config --global user.name "$USER_NAME" &&
          git config --global user.email "$USER_EMAIL" &&
          echo "PACKAGER=$USER_NAME <$USER_EMAIL>" >>$GITHUB_ENV
      - uses: dennisameling/setup-git-for-windows-sdk@native-arm64-sdk
        if: env.SKIP != 'true'
        with:
          flavor: ${{ matrix.arch.name == 'aarch64' && 'full' || 'build-installers' }}
          architecture: ${{ matrix.arch.name == 'aarch64' && 'aarch64' || 'x86_64' }}
          # We only have to clean up on self-hosted runners
          cleanup: ${{ (runner.arch == 'ARM64' && true) || false }}
      - name: Download bundle-artifacts
        if: env.SKIP != 'true'
        uses: actions/download-artifact@v1
        with:
          name: bundle-artifacts
          path: bundle-artifacts
      - name: Clone and update build-extra
        if: env.SKIP != 'true'
        shell: bash
        run: |
          d=/usr/src/build-extra &&
          if test ! -d $d/.git
          then
            git clone --single-branch -b main https://github.com/git-for-windows/build-extra $d
          else
            git -C $d fetch https://github.com/git-for-windows/build-extra main &&
            git -C $d switch -C main FETCH_HEAD
          fi &&
          git -C $d pull "$PWD"/bundle-artifacts/build-extra.bundle main
      - name: Check out git/git
        if: env.SKIP != 'true'
        shell: bash
        run: |
          git -c init.defaultBranch=main init &&
          git remote add -f origin https://github.com/git-for-windows/git &&
          git fetch --tags bundle-artifacts/git.bundle $(cat bundle-artifacts/next_version) &&
          git reset --hard $(cat bundle-artifacts/next_version)
      - name: Prepare home directory for code-signing
        env:
          CODESIGN_P12: ${{secrets.CODESIGN_P12}}
          CODESIGN_PASS: ${{secrets.CODESIGN_PASS}}
        if: env.SKIP != 'true' && env.CODESIGN_P12 != '' && env.CODESIGN_PASS != ''
        shell: bash
        run: |
          cd home &&
          mkdir -p .sig &&
          echo -n "$CODESIGN_P12" | tr % '\n' | base64 -d >.sig/codesign.p12 &&
          echo -n "$CODESIGN_PASS" >.sig/codesign.pass
          git config --global alias.signtool '!sh "/usr/src/build-extra/signtool.sh"'
      - name: Prepare home directory for GPG signing
        if: env.SKIP != 'true' && env.GPGKEY != ''
        shell: bash
        run: |
          echo '${{secrets.PRIVGPGKEY}}' | tr % '\n' | gpg $GPG_OPTIONS --import &&
          info="$(gpg --list-keys --with-colons "${GPGKEY%% *}" | cut -d : -f 1,10 | sed -n '/^uid/{s|uid:||p;q}')" &&
          git config --global user.name "${info% <*}" &&
          git config --global user.email "<${info#*<}"
        env:
          GPGKEY: ${{secrets.GPGKEY}}
      # Until there is a Git SDK for arm64, we'll need to install a few packages manually
      # We install prebuilt binaries to save lots of CI time
      - name: Install aarch64 deps
        if: env.SKIP != 'true' && matrix.arch.name == 'aarch64'
        shell: bash
        run: |
          set -x

          package_dir="tmp-aarch64-deps"
          release_url="https://github.com/dennisameling/git/releases/download/v2.39.0.windows.99"
          packages="mingw-w64-clang-aarch64-openssl-1.1.1.s-1-any.pkg.tar.zst mingw-w64-clang-aarch64-curl-7.86.0-1-any.pkg.tar.zst"

          mkdir -p $package_dir && cd $package_dir

          for package in $packages
          do
            curl -LOf $release_url/$package || exit 1
          done

          pacman -U --noconfirm $packages

          cd ../
      - name: Build mingw-w64-${{matrix.arch.pacman_arch}}-git
        if: env.SKIP != 'true'
        env:
          GPGKEY: "${{secrets.GPGKEY}}"
        shell: bash
        run: |
          set -x

          MINGW_PREFIX_FOR_GIT=$(test "${{matrix.arch.name}}" == "aarch64" && echo "/clangarm64" || echo "/mingw64")

          # Make sure that there is a `/usr/bin/git` that can be used by `makepkg-mingw`
          printf '#!/bin/sh\n\nexec $MINGW_PREFIX_FOR_GIT/bin/git.exe "$@"\n' >/usr/bin/git &&

          # We don't use `cv2pdb` on aarch64, which we build using Clang instead of GCC
          if test "${{matrix.arch.name}}" != "aarch64"
          then
            # Restrict `PATH` to MSYS2 and to Visual Studio (to let `cv2pdb` find the relevant DLLs)
            PATH="/mingw64/bin:/usr/bin:/c/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/IDE/:/C/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin${{matrix.arch.bin}}:/C/Windows/system32"
            type -p mspdb140.dll || exit 1
          else
            # We don't want to build dashed built-ins anymore. Let's do this on aarch64 only to begin with
            export SKIP_DASHED_BUILT_INS=YesPlease
          fi &&

          # Temp until https://github.com/git-for-windows/build-extra/pull/452 is merged
          $MINGW_PREFIX_FOR_GIT/bin/curl.exe https://raw.githubusercontent.com/git-for-windows/build-extra/3d6fc6dfe74902644c042500ad80e17abd134bfc/please.sh -o /usr/src/build-extra/please.sh &&

          sh -x /usr/src/build-extra/please.sh build-mingw-w64-git --only-${{matrix.arch.name}} --build-src-pkg -o artifacts HEAD &&
          cp bundle-artifacts/ver artifacts/ &&
          if test -n "$GPGKEY"
          then
            for tar in artifacts/*.tar*
            do
              /usr/src/build-extra/gnupg-with-gpgkey.sh --detach-sign --no-armor $tar
            done
          fi &&

          b=$PWD/artifacts &&
          version=$(cat bundle-artifacts/next_version) &&
          (cd /usr/src/MINGW-packages/mingw-w64-git &&
          cp PKGBUILD.$version PKGBUILD &&
          git commit -s -m "mingw-w64-git: new version ($version)" PKGBUILD &&
          git bundle create "$b"/MINGW-packages.bundle origin/main..main)
      - name: Clean up temporary files
        if: always() && env.SKIP != 'true'
        shell: bash
        run: rm -rf home
      - name: Publish mingw-w64-${{matrix.arch.pacman_arch}}-git
        if: env.SKIP != 'true'
        uses: actions/upload-artifact@v1
        with:
          name: pkg-${{matrix.arch.name}}
          path: artifacts
  artifacts:
    # Hack to ensure that the "determine skip" step works if no self-hosted ARM64 runner is available
    runs-on: ${{ ((matrix.arch.name == 'aarch64' && github.event.inputs.build_arm64 == 'true') && fromJSON('["Windows", "ARM64"]')) || 'windows-latest' }}
    needs: pkg
    strategy:
      matrix:
        artifact:
          - name: installer
            fileprefix: Git
            fileextension: exe
          - name: portable
            fileprefix: PortableGit
            fileextension: exe
          - name: archive
            fileprefix: Git
            fileextension: tar.bz2
          - name: mingit
            fileprefix: MinGit
            fileextension: zip
          - name: mingit-busybox
            fileprefix: MinGit
            fileextension: zip
        arch:
          - name: x86_64
            pacman_arch: x86_64
            bitness: 64
            msystem: MINGW64
          - name: i686
            pacman_arch: i686
            bitness: 32
            msystem: MINGW32
          - name: aarch64
            pacman_arch: clang-aarch64
            bitness: 64
            msystem: CLANGARM64
      fail-fast: false
    env:
      MSYSTEM: ${{matrix.arch.msystem}}
    steps:
      - name: Determine whether this job should be skipped
        shell: bash
        run: |
          if test "${{matrix.arch.name}}" = "aarch64" && test "$BUILD_ARM64" != "true"
          then
            echo "SKIP=true" >>$GITHUB_ENV
            exit 0
          fi
          case " $BUILD_ONLY " in
          '  ') ;; # not set; build all
          *" ${{matrix.artifact.name}} "*|*" ${{matrix.artifact.name}}-${{matrix.arch.name}}"*) ;; # build this artifact
          *) echo "SKIP=true" >>$GITHUB_ENV;;
          esac
      - name: Download pkg-${{matrix.arch.name}}
        if: env.SKIP != 'true'
        uses: actions/download-artifact@v1
        with:
          name: pkg-${{matrix.arch.name}}
          path: pkg-${{matrix.arch.name}}
      - name: Download bundle-artifacts
        if: env.SKIP != 'true'
        uses: actions/download-artifact@v1
        with:
          name: bundle-artifacts
          path: bundle-artifacts
      - uses: dennisameling/setup-git-for-windows-sdk@native-arm64-sdk
        if: env.SKIP != 'true'
        with:
          flavor: ${{ matrix.arch.name == 'aarch64' && 'full' || 'build-installers' }}
          architecture: ${{matrix.arch.name}}
          # We only have to clean up on self-hosted runners
          cleanup: ${{ (runner.arch == 'ARM64' && true) || false }}
      # Until there is a Git SDK for arm64, we'll need to install a few packages manually
      # We install prebuilt binaries to save lots of CI time
      - name: Install aarch64 deps
        if: env.SKIP != 'true' && matrix.arch.name == 'aarch64'
        shell: bash
        run: |
          set -x

          package_dir="tmp-aarch64-deps"
          release_url="https://github.com/dennisameling/git/releases/download/v2.39.0.windows.99"
          packages="mingw-w64-clang-aarch64-openssl-1.1.1.s-1-any.pkg.tar.zst
          mingw-w64-clang-aarch64-curl-7.86.0-1-any.pkg.tar.zst
          mingw-w64-clang-aarch64-wintoast-1.0.0.181.9b0663d-1-any.pkg.tar.zst
          mingw-w64-clang-aarch64-xpdf-tools-4.00-1-any.pkg.tar.zst
          mingw-w64-clang-aarch64-git-credential-manager-2.0.886-1-any.pkg.tar.zst
          mingw-w64-clang-aarch64-git-lfs-3.3.0-1-any.pkg.tar.zst
          git-extra-1.1.616.ced335bb5-1-any.pkg.tar.zst"

          mkdir -p $package_dir && cd $package_dir

          for package in $packages
          do
            curl -LOf $release_url/$package || exit 1
          done

          pacman -U --noconfirm $packages

          # Some additional packages we need for most artifacts
          pacman -S --noconfirm mingw-w64-clang-aarch64-connect mingw-w64-clang-aarch64-antiword mingw-w64-clang-aarch64-odt2txt

          cd ../
      - name: Clone and update build-extra
        if: env.SKIP != 'true'
        shell: bash
        run: |
          d=/usr/src/build-extra &&
          if test ! -d $d/.git
          then
            git clone --single-branch -b main https://github.com/git-for-windows/build-extra $d
          else
            git -C $d fetch https://github.com/git-for-windows/build-extra main &&
            git -C $d switch -C main FETCH_HEAD
          fi &&
          git -C $d pull "$PWD"/bundle-artifacts/build-extra.bundle main
      - name: Prepare home directory for code-signing
        env:
          CODESIGN_P12: ${{secrets.CODESIGN_P12}}
          CODESIGN_PASS: ${{secrets.CODESIGN_PASS}}
        if: env.SKIP != 'true' && (matrix.artifact.name == 'installer' || matrix.artifact.name == 'portable') && env.CODESIGN_P12 != '' && env.CODESIGN_PASS != ''
        shell: bash
        run: |
          mkdir -p home/.sig &&
          echo -n "$CODESIGN_P12" | tr % '\n' | base64 -d >home/.sig/codesign.p12 &&
          echo -n "$CODESIGN_PASS" >home/.sig/codesign.pass &&
          git config --global alias.signtool '!sh "/usr/src/build-extra/signtool.sh"'
      - name: Build ${{matrix.arch.name}} ${{matrix.artifact.name}}
        if: env.SKIP != 'true'
        shell: bash
        run: |
          set -x

          # Temp until https://github.com/git-for-windows/build-extra/pull/452 is merged
          /mingw${{matrix.arch.bitness}}/bin/curl.exe https://raw.githubusercontent.com/git-for-windows/build-extra/3d6fc6dfe74902644c042500ad80e17abd134bfc/please.sh -o /usr/src/build-extra/please.sh &&

          eval /usr/src/build-extra/please.sh make_installers_from_mingw_w64_git --version=$(cat pkg-${{matrix.arch.name}}/ver) -o artifacts --${{matrix.artifact.name}} --pkg=pkg-${{matrix.arch.name}}/mingw-w64-${{matrix.arch.pacman_arch}}-git-[0-9]*.tar.xz --pkg=pkg-${{matrix.arch.name}}/mingw-w64-${{matrix.arch.pacman_arch}}-git-doc-html-[0-9]*.tar.xz &&
          if test portable = '${{matrix.artifact.name}}' && test -n "$(git config alias.signtool)"
          then
            git signtool artifacts/PortableGit-*.exe
          fi &&
          openssl dgst -sha256 artifacts/${{matrix.artifact.fileprefix}}-*.${{matrix.artifact.fileextension}} | sed "s/.* //" >artifacts/sha-256.txt
      - name: Copy package-versions and pdbs
        if: env.SKIP != 'true' && matrix.artifact.name == 'installer' && matrix.arch.name != 'aarch64'
        shell: bash
        run: |
          cp /usr/src/build-extra/installer/package-versions.txt artifacts/ &&

          a=$PWD/artifacts &&
          p=$PWD/pkg-${{matrix.arch.name}} &&
          (cd /usr/src/build-extra &&
          mkdir -p cached-source-packages &&
          cp "$p"/*-pdb* cached-source-packages/ &&
          GIT_CONFIG_PARAMETERS="'windows.sdk${{matrix.arch.bitness}}.path='" ./please.sh bundle_pdbs --arch=${{matrix.arch.name}} --directory="$a" installer/package-versions.txt)
      - name: Clean up temporary files
        if: always() && env.SKIP != 'true'
        shell: bash
        run: rm -rf home
      - name: Publish ${{matrix.artifact.name}}-${{matrix.arch.name}}
        if: env.SKIP != 'true'
        uses: actions/upload-artifact@v1
        with:
          name: ${{matrix.artifact.name}}-${{matrix.arch.name}}
          path: artifacts
  nuget:
    runs-on: windows-latest
    needs: pkg
    steps:
      - name: Determine whether this job should be skipped
        shell: bash
        run: |
          case " $BUILD_ONLY " in
          '  ') ;; # not set; build all
          *" nuget "*) ;; # build this artifact
          *) echo "SKIP=true" >>$GITHUB_ENV;;
          esac
      - name: Download pkg-x86_64
        if: env.SKIP != 'true'
        uses: actions/download-artifact@v1
        with:
          name: pkg-x86_64
          path: pkg-x86_64
      - name: Download bundle-artifacts
        if: env.SKIP != 'true'
        uses: actions/download-artifact@v1
        with:
          name: bundle-artifacts
          path: bundle-artifacts
      - uses: dennisameling/setup-git-for-windows-sdk@native-arm64-sdk
        if: env.SKIP != 'true'
        with:
          flavor: build-installers
      - name: Clone and update build-extra
        if: env.SKIP != 'true'
        shell: bash
        run: |
          d=/usr/src/build-extra &&
          if test ! -d $d/.git
          then
            git clone --single-branch -b main https://github.com/git-for-windows/build-extra $d
          else
            git -C $d fetch https://github.com/git-for-windows/build-extra main &&
            git -C $d switch -C main FETCH_HEAD
          fi &&
          git -C $d pull "$PWD"/bundle-artifacts/build-extra.bundle main
      - uses: nuget/setup-nuget@v1
        if: env.SKIP != 'true'
      - name: Build 64-bit NuGet packages
        if: env.SKIP != 'true'
        shell: bash
        run: |
          /usr/src/build-extra/please.sh make_installers_from_mingw_w64_git --version=$(cat pkg-x86_64/ver) -o artifacts --nuget --pkg=pkg-x86_64/mingw-w64-x86_64-git-[0-9]*.tar.xz --pkg=pkg-x86_64/mingw-w64-x86_64-git-doc-html-[0-9]*.tar.xz &&
          /usr/src/build-extra/please.sh make_installers_from_mingw_w64_git --version=$(cat pkg-x86_64/ver) -o artifacts --nuget-mingit &&
          openssl dgst -sha256 artifacts/Git*.nupkg | sed "s/.* //" >artifacts/sha-256.txt
      - name: Publish nuget-x86_64
        if: env.SKIP != 'true'
        uses: actions/upload-artifact@v1
        with:
          name: nuget-x86_64
          path: artifacts
